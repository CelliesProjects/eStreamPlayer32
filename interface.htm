<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="minimal-ui,width=device-width,initial-scale=1.0,user-scalable=no" />
<link rel="icon" href="data:;base64,iVBORw0KGgo="><!--prevent favicon requests-->
<link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.4.1.js"></script>
<title>ESP32WebRadio</title>
<meta name="description" content="ESP32WebRadio">
<meta name="author" content="Cellie">
<script>!function(a,b){"function"==typeof define&&define.amd?define([],b):"undefined"!=typeof module&&module.exports?module.exports=b():a.ReconnectingWebSocket=b()}(this,function(){function a(b,c,d){function l(a,b){var c=document.createEvent("CustomEvent");return c.initCustomEvent(a,!1,!1,b),c}var e={debug:!1,automaticOpen:!0,reconnectInterval:1e3,maxReconnectInterval:3e4,reconnectDecay:1.5,timeoutInterval:2e3};d||(d={});for(var f in e)this[f]="undefined"!=typeof d[f]?d[f]:e[f];this.url=b,this.reconnectAttempts=0,this.readyState=WebSocket.CONNECTING,this.protocol=null;var h,g=this,i=!1,j=!1,k=document.createElement("div");k.addEventListener("open",function(a){g.onopen(a)}),k.addEventListener("close",function(a){g.onclose(a)}),k.addEventListener("connecting",function(a){g.onconnecting(a)}),k.addEventListener("message",function(a){g.onmessage(a)}),k.addEventListener("error",function(a){g.onerror(a)}),this.addEventListener=k.addEventListener.bind(k),this.removeEventListener=k.removeEventListener.bind(k),this.dispatchEvent=k.dispatchEvent.bind(k),this.open=function(b){h=new WebSocket(g.url,c||[]),b||k.dispatchEvent(l("connecting")),(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","attempt-connect",g.url);var d=h,e=setTimeout(function(){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","connection-timeout",g.url),j=!0,d.close(),j=!1},g.timeoutInterval);h.onopen=function(){clearTimeout(e),(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onopen",g.url),g.protocol=h.protocol,g.readyState=WebSocket.OPEN,g.reconnectAttempts=0;var d=l("open");d.isReconnect=b,b=!1,k.dispatchEvent(d)},h.onclose=function(c){if(clearTimeout(e),h=null,i)g.readyState=WebSocket.CLOSED,k.dispatchEvent(l("close"));else{g.readyState=WebSocket.CONNECTING;var d=l("connecting");d.code=c.code,d.reason=c.reason,d.wasClean=c.wasClean,k.dispatchEvent(d),b||j||((g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onclose",g.url),k.dispatchEvent(l("close")));var e=g.reconnectInterval*Math.pow(g.reconnectDecay,g.reconnectAttempts);setTimeout(function(){g.reconnectAttempts++,g.open(!0)},e>g.maxReconnectInterval?g.maxReconnectInterval:e)}},h.onmessage=function(b){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onmessage",g.url,b.data);var c=l("message");c.data=b.data,k.dispatchEvent(c)},h.onerror=function(b){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onerror",g.url,b),k.dispatchEvent(l("error"))}},1==this.automaticOpen&&this.open(!1),this.send=function(b){if(h)return(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","send",g.url,b),h.send(b);throw"INVALID_STATE_ERR : Pausing to reconnect websocket"},this.close=function(a,b){"undefined"==typeof a&&(a=1e3),i=!0,h&&h.close(a,b)},this.refresh=function(){h&&h.close()}}return a.prototype.onopen=function(){},a.prototype.onclose=function(){},a.prototype.onconnecting=function(){},a.prototype.onmessage=function(){},a.prototype.onerror=function(){},a.debugAll=!1,a.CONNECTING=WebSocket.CONNECTING,a.OPEN=WebSocket.OPEN,a.CLOSING=WebSocket.CLOSING,a.CLOSED=WebSocket.CLOSED,a});</script>
<!-- https://www.w3schools.com/howto/howto_js_tabs.asp -->
<style>
*{box-sizing:border-box;}
html,body{
  position:absolute;
  top:0;
  bottom:0;
  left:0;
  right:0;
  margin:0;
  padding:0;
  background-color:grey;
  text-align:center;
  font-family:'Roboto',sans-serif;
  overflow:hidden;
}
a{
  color:black;
  text-decoration:none;
}
#infobar{
  margin:2px;
}
/* Style the tab */
.tab {
  overflow: hidden;
  border: 1px solid #ccc;
  background-color: #f1f1f1;
}

/* Style the buttons that are used to open the tab content */
.tab button {
  background-color: inherit;
  float: left;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 14px 16px;
  transition: 0.3s;
}

/* Change background color of buttons on hover */
.tab button:hover {
  background-color: #ddd;
}

/* Create an active/current tablink class */
.tab button.active {
  background-color: #ccc;
}

/* Style the tab content */
.tabcontent {
  position:absolute;
  bottom:0;
  left:0;
  right:0;
  display: none;
  padding: 6px 12px;
  border: 1px solid #ccc;
  border-top: none;
}
.librarylist{
  width:100%;
  float:left;
  height:100%;
  overflow-y:auto;
  text-align:left;
}
#uplink, .folderlink, .filelink{
  background:beige;
  margin:2px;
  font-size:20px;
  padding:2px 10px;
}
.foldericon{
  width:30px;
  height:30px;
}
</style>
</head>
<body>
<div class="tab">
  <p id="infobar">infobar</p>
  <button class="tablinks">HOME</button>
  <button class="tablinks">PLAYLIST</button>
  <button class="tablinks">SDCARD</button>
  <button class="tablinks">LIBRARY</button>
  <button class="tablinks">WEBRADIO</button>
</div>
<div id="HOME" class="tabcontent">
  <h3>CURRENT NAME</h3>
  <p>Show currently playing.</p>
</div>
<div id="PLAYLIST" class="tabcontent">
  <h3>PLAYLIST</h3>
  <p>Show and edit playlist.</p>
</div>
<div id="SDCARD" class="tabcontent">
  <h3>SDCARD</h3>
  <p>Browse SD card and add to playlist.</p>
</div>
<div id="LIBRARY" class="tabcontent">
  <div class="librarylist" id="browselist">browselist</div>
</div>
<div id="WEBRADIO" class="tabcontent">
  <h3>WEBRADIO</h3>
  <p>Browse webradio and add to playlist.</p>
</div>
<script>
$(document).ready(function(){
  const debugip="192.168.0.105";  //change this to the esp32 ip for remote running of this page
  var currentpath='/';
  $('.tabcontent').css('top',$('.tab').css('height'));

  var url="http://";
  if (window.location.hostname)url+=window.location.hostname;
  else url+=debugip;

  var ws_host="ws://";
  if(window.location.hostname)ws_host+=window.location.hostname+"/ws";
  else ws_host+=debugip+"/ws";
  var ws=new ReconnectingWebSocket(ws_host);
  ws.onmessage=function(e){
    var command=e.data.split("\n");
    switch(command[0]){
      case "folder":
        currentpath=command[1];
        $('#browselist').html(command[2]);
        $('#infobar').html("Library: "+currentpath);
      break;
      case "current":
        $('#current').html(command[1]);
      break;
      case "updatfav":
        if($('#favorites').css('color')==="rgb(0, 0, 255)")$('#favorites').click();
      break;
      case "icyurl":
        $('#station').html('<a href="'+command[1]+'" target="_blank">'+$('#station').html()+'</a>');
      break;
      default:break;
    }
  };
  ws.onopen=function(event){
    console.log('[WebSocket] Connected');
    ws.send("getfolder\n/\n");
  }
  ws.onclose=function(event){console.log('[WebSocket] Connection died, code='+event.code+' reason='+event.reason);};
  ws.onerror=function(error){console.log('[WebSocket] Error: '+error.message)};

  $('.tablinks').first().click();

  $('.tablinks').on('click',function(){
    $('.tabcontent').hide().eq($(this).index('.tablinks')).show();
  });

  $('body').on('click','#uplink',function(){
    if(currentpath.includes('/'))currentpath=currentpath.split('/').slice(0,-1).join('/');
    //else currentpath='/';
    if(!currentpath)currentpath='/';
    console.log("new folder ="+currentpath);
    ws.send("getfolder\n"+currentpath+"\n");
  });

  $('body').on('click','.folderlink',function(){
    if ('/'!=currentpath) currentpath+="/";
    currentpath += $(this).text();
    console.log("new folder ="+currentpath);
    ws.send("getfolder\n"+currentpath+"\n");
  });

  $('body').on('click','.filelink',function(){
    console.log(currentpath+'/'+$(this).text());
    ws.send("playdirect\n"+currentpath+'/'+$(this).text()+"\n");
  });

});

</script>
</body>
</html>
